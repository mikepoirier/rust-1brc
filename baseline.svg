<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="859857"><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (68,015 samples, 7.91%)</title><rect x="2.5842%" y="277" width="7.9100%" height="15" fill="rgb(227,0,7)" fg:x="22220" fg:w="68015"/><text x="2.8342%" y="287.50">&lt;alloc::syn..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (942 samples, 0.11%)</title><rect x="10.3846%" y="261" width="0.1096%" height="15" fill="rgb(217,0,24)" fg:x="89293" fg:w="942"/><text x="10.6346%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_add (942 samples, 0.11%)</title><rect x="10.3846%" y="245" width="0.1096%" height="15" fill="rgb(221,193,54)" fg:x="89293" fg:w="942"/><text x="10.6346%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1,706 samples, 0.20%)</title><rect x="10.4942%" y="277" width="0.1984%" height="15" fill="rgb(248,212,6)" fg:x="90235" fg:w="1706"/><text x="10.7442%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (398 samples, 0.05%)</title><rect x="13.4469%" y="261" width="0.0463%" height="15" fill="rgb(208,68,35)" fg:x="115624" fg:w="398"/><text x="13.6969%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (398 samples, 0.05%)</title><rect x="13.4469%" y="245" width="0.0463%" height="15" fill="rgb(232,128,0)" fg:x="115624" fg:w="398"/><text x="13.6969%" y="255.50"></text></g><g><title>alloc::string::String::new (179 samples, 0.02%)</title><rect x="13.4932%" y="261" width="0.0208%" height="15" fill="rgb(207,160,47)" fg:x="116022" fg:w="179"/><text x="13.7432%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::ends_with (1,721 samples, 0.20%)</title><rect x="13.5214%" y="261" width="0.2001%" height="15" fill="rgb(228,23,34)" fg:x="116265" fg:w="1721"/><text x="13.7714%" y="271.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_suffix_of (1,721 samples, 0.20%)</title><rect x="13.5214%" y="245" width="0.2001%" height="15" fill="rgb(218,30,26)" fg:x="116265" fg:w="1721"/><text x="13.7714%" y="255.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_suffix_of (1,721 samples, 0.20%)</title><rect x="13.5214%" y="229" width="0.2001%" height="15" fill="rgb(220,122,19)" fg:x="116265" fg:w="1721"/><text x="13.7714%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::ends_with (1,721 samples, 0.20%)</title><rect x="13.5214%" y="213" width="0.2001%" height="15" fill="rgb(250,228,42)" fg:x="116265" fg:w="1721"/><text x="13.7714%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,424 samples, 0.17%)</title><rect x="13.5560%" y="197" width="0.1656%" height="15" fill="rgb(240,193,28)" fg:x="116562" fg:w="1424"/><text x="13.8060%" y="207.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1,424 samples, 0.17%)</title><rect x="13.5560%" y="181" width="0.1656%" height="15" fill="rgb(216,20,37)" fg:x="116562" fg:w="1424"/><text x="13.8060%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,424 samples, 0.17%)</title><rect x="13.5560%" y="165" width="0.1656%" height="15" fill="rgb(206,188,39)" fg:x="116562" fg:w="1424"/><text x="13.8060%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,597 samples, 0.19%)</title><rect x="17.0086%" y="229" width="0.1857%" height="15" fill="rgb(217,207,13)" fg:x="146250" fg:w="1597"/><text x="17.2586%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,597 samples, 0.19%)</title><rect x="17.0086%" y="213" width="0.1857%" height="15" fill="rgb(231,73,38)" fg:x="146250" fg:w="1597"/><text x="17.2586%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,597 samples, 0.19%)</title><rect x="17.0086%" y="197" width="0.1857%" height="15" fill="rgb(225,20,46)" fg:x="146250" fg:w="1597"/><text x="17.2586%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,105 samples, 0.13%)</title><rect x="17.0659%" y="181" width="0.1285%" height="15" fill="rgb(210,31,41)" fg:x="146742" fg:w="1105"/><text x="17.3159%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,105 samples, 0.13%)</title><rect x="17.0659%" y="165" width="0.1285%" height="15" fill="rgb(221,200,47)" fg:x="146742" fg:w="1105"/><text x="17.3159%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,105 samples, 0.13%)</title><rect x="17.0659%" y="149" width="0.1285%" height="15" fill="rgb(226,26,5)" fg:x="146742" fg:w="1105"/><text x="17.3159%" y="159.50"></text></g><g><title>alloc::string::String::len (5,931 samples, 0.69%)</title><rect x="17.1944%" y="229" width="0.6898%" height="15" fill="rgb(249,33,26)" fg:x="147847" fg:w="5931"/><text x="17.4444%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5,931 samples, 0.69%)</title><rect x="17.1944%" y="213" width="0.6898%" height="15" fill="rgb(235,183,28)" fg:x="147847" fg:w="5931"/><text x="17.4444%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (90 samples, 0.01%)</title><rect x="17.8893%" y="229" width="0.0105%" height="15" fill="rgb(221,5,38)" fg:x="153822" fg:w="90"/><text x="18.1393%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (90 samples, 0.01%)</title><rect x="17.8893%" y="213" width="0.0105%" height="15" fill="rgb(247,18,42)" fg:x="153822" fg:w="90"/><text x="18.1393%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,592 samples, 0.19%)</title><rect x="29.4169%" y="197" width="0.1851%" height="15" fill="rgb(241,131,45)" fg:x="252943" fg:w="1592"/><text x="29.6669%" y="207.50"></text></g><g><title>core::str::converts::from_utf8 (101,312 samples, 11.78%)</title><rect x="17.8997%" y="229" width="11.7824%" height="15" fill="rgb(249,31,29)" fg:x="153912" fg:w="101312"/><text x="18.1497%" y="239.50">core::str::conver..</text></g><g><title>core::str::validations::run_utf8_validation (85,450 samples, 9.94%)</title><rect x="19.7444%" y="213" width="9.9377%" height="15" fill="rgb(225,111,53)" fg:x="169774" fg:w="85450"/><text x="19.9944%" y="223.50">core::str::val..</text></g><g><title>core::str::validations::utf8_char_width (689 samples, 0.08%)</title><rect x="29.6020%" y="197" width="0.0801%" height="15" fill="rgb(238,160,17)" fg:x="254535" fg:w="689"/><text x="29.8520%" y="207.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (3,052 samples, 0.35%)</title><rect x="30.2446%" y="197" width="0.3549%" height="15" fill="rgb(214,148,48)" fg:x="260060" fg:w="3052"/><text x="30.4946%" y="207.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (3,052 samples, 0.35%)</title><rect x="30.2446%" y="181" width="0.3549%" height="15" fill="rgb(232,36,49)" fg:x="260060" fg:w="3052"/><text x="30.4946%" y="191.50"></text></g><g><title>core::cmp::min (779 samples, 0.09%)</title><rect x="30.5089%" y="165" width="0.0906%" height="15" fill="rgb(209,103,24)" fg:x="262333" fg:w="779"/><text x="30.7589%" y="175.50"></text></g><g><title>core::cmp::Ord::min (779 samples, 0.09%)</title><rect x="30.5089%" y="149" width="0.0906%" height="15" fill="rgb(229,88,8)" fg:x="262333" fg:w="779"/><text x="30.7589%" y="159.50"></text></g><g><title>core::cmp::min_by (779 samples, 0.09%)</title><rect x="30.5089%" y="133" width="0.0906%" height="15" fill="rgb(213,181,19)" fg:x="262333" fg:w="779"/><text x="30.7589%" y="143.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (3,022 samples, 0.35%)</title><rect x="30.6024%" y="165" width="0.3515%" height="15" fill="rgb(254,191,54)" fg:x="263137" fg:w="3022"/><text x="30.8524%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (3,019 samples, 0.35%)</title><rect x="30.6028%" y="149" width="0.3511%" height="15" fill="rgb(241,83,37)" fg:x="263140" fg:w="3019"/><text x="30.8528%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3,019 samples, 0.35%)</title><rect x="30.6028%" y="133" width="0.3511%" height="15" fill="rgb(233,36,39)" fg:x="263140" fg:w="3019"/><text x="30.8528%" y="143.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (3,163 samples, 0.37%)</title><rect x="30.5995%" y="197" width="0.3679%" height="15" fill="rgb(226,3,54)" fg:x="263112" fg:w="3163"/><text x="30.8495%" y="207.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (3,163 samples, 0.37%)</title><rect x="30.5995%" y="181" width="0.3679%" height="15" fill="rgb(245,192,40)" fg:x="263112" fg:w="3163"/><text x="30.8495%" y="191.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (116 samples, 0.01%)</title><rect x="30.9539%" y="165" width="0.0135%" height="15" fill="rgb(238,167,29)" fg:x="266159" fg:w="116"/><text x="31.2039%" y="175.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (115 samples, 0.01%)</title><rect x="30.9540%" y="149" width="0.0134%" height="15" fill="rgb(232,182,51)" fg:x="266160" fg:w="115"/><text x="31.2040%" y="159.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (94 samples, 0.01%)</title><rect x="30.9564%" y="133" width="0.0109%" height="15" fill="rgb(231,60,39)" fg:x="266181" fg:w="94"/><text x="31.2064%" y="143.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (94 samples, 0.01%)</title><rect x="30.9564%" y="117" width="0.0109%" height="15" fill="rgb(208,69,12)" fg:x="266181" fg:w="94"/><text x="31.2064%" y="127.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (94 samples, 0.01%)</title><rect x="30.9564%" y="101" width="0.0109%" height="15" fill="rgb(235,93,37)" fg:x="266181" fg:w="94"/><text x="31.2064%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1,829 samples, 0.21%)</title><rect x="31.3267%" y="85" width="0.2127%" height="15" fill="rgb(213,116,39)" fg:x="269365" fg:w="1829"/><text x="31.5767%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (101 samples, 0.01%)</title><rect x="32.9199%" y="69" width="0.0117%" height="15" fill="rgb(222,207,29)" fg:x="283064" fg:w="101"/><text x="33.1699%" y="79.50"></text></g><g><title>alloc::alloc::Global::grow_impl (101 samples, 0.01%)</title><rect x="32.9199%" y="53" width="0.0117%" height="15" fill="rgb(206,96,30)" fg:x="283064" fg:w="101"/><text x="33.1699%" y="63.50"></text></g><g><title>alloc::alloc::realloc (98 samples, 0.01%)</title><rect x="32.9202%" y="37" width="0.0114%" height="15" fill="rgb(218,138,4)" fg:x="283067" fg:w="98"/><text x="33.1702%" y="47.50"></text></g><g><title>__rdl_alloc (5,854 samples, 0.68%)</title><rect x="32.9316%" y="69" width="0.6808%" height="15" fill="rgb(250,191,14)" fg:x="283165" fg:w="5854"/><text x="33.1816%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2,866 samples, 0.33%)</title><rect x="33.2791%" y="53" width="0.3333%" height="15" fill="rgb(239,60,40)" fg:x="286153" fg:w="2866"/><text x="33.5291%" y="63.50"></text></g><g><title>__rust_alloc (2,908 samples, 0.34%)</title><rect x="33.6124%" y="69" width="0.3382%" height="15" fill="rgb(206,27,48)" fg:x="289019" fg:w="2908"/><text x="33.8624%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (41,841 samples, 4.87%)</title><rect x="31.5428%" y="85" width="4.8660%" height="15" fill="rgb(225,35,8)" fg:x="271223" fg:w="41841"/><text x="31.7928%" y="95.50">alloc:..</text></g><g><title>malloc (21,105 samples, 2.45%)</title><rect x="33.9544%" y="69" width="2.4545%" height="15" fill="rgb(250,213,24)" fg:x="291959" fg:w="21105"/><text x="34.2044%" y="79.50">ma..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (45,470 samples, 5.29%)</title><rect x="31.1461%" y="149" width="5.2881%" height="15" fill="rgb(247,123,22)" fg:x="267812" fg:w="45470"/><text x="31.3961%" y="159.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (45,470 samples, 5.29%)</title><rect x="31.1461%" y="133" width="5.2881%" height="15" fill="rgb(231,138,38)" fg:x="267812" fg:w="45470"/><text x="31.3961%" y="143.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (45,313 samples, 5.27%)</title><rect x="31.1644%" y="117" width="5.2698%" height="15" fill="rgb(231,145,46)" fg:x="267969" fg:w="45313"/><text x="31.4144%" y="127.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (45,246 samples, 5.26%)</title><rect x="31.1722%" y="101" width="5.2620%" height="15" fill="rgb(251,118,11)" fg:x="268036" fg:w="45246"/><text x="31.4222%" y="111.50">alloc:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (11,208 samples, 1.30%)</title><rect x="36.4342%" y="149" width="1.3035%" height="15" fill="rgb(217,147,25)" fg:x="313282" fg:w="11208"/><text x="36.6842%" y="159.50"></text></g><g><title>[libc.so.6] (11,190 samples, 1.30%)</title><rect x="36.4363%" y="133" width="1.3014%" height="15" fill="rgb(247,81,37)" fg:x="313300" fg:w="11190"/><text x="36.6863%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (58,264 samples, 6.78%)</title><rect x="30.9674%" y="197" width="6.7760%" height="15" fill="rgb(209,12,38)" fg:x="266275" fg:w="58264"/><text x="31.2174%" y="207.50">alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (58,264 samples, 6.78%)</title><rect x="30.9674%" y="181" width="6.7760%" height="15" fill="rgb(227,1,9)" fg:x="266275" fg:w="58264"/><text x="31.2174%" y="191.50">&lt;alloc::v..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (58,264 samples, 6.78%)</title><rect x="30.9674%" y="165" width="6.7760%" height="15" fill="rgb(248,47,43)" fg:x="266275" fg:w="58264"/><text x="31.2174%" y="175.50">alloc::ve..</text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (280,483 samples, 32.62%)</title><rect x="10.6926%" y="277" width="32.6197%" height="15" fill="rgb(221,10,30)" fg:x="91941" fg:w="280483"/><text x="10.9426%" y="287.50">&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::I..</text></g><g><title>std::io::BufRead::read_line (254,438 samples, 29.59%)</title><rect x="13.7216%" y="261" width="29.5907%" height="15" fill="rgb(210,229,1)" fg:x="117986" fg:w="254438"/><text x="13.9716%" y="271.50">std::io::BufRead::read_line</text></g><g><title>std::io::append_to_string (254,437 samples, 29.59%)</title><rect x="13.7217%" y="245" width="29.5906%" height="15" fill="rgb(222,148,37)" fg:x="117987" fg:w="254437"/><text x="13.9717%" y="255.50">std::io::append_to_string</text></g><g><title>std::io::BufRead::read_line::_{{closure}} (117,200 samples, 13.63%)</title><rect x="29.6821%" y="229" width="13.6302%" height="15" fill="rgb(234,67,33)" fg:x="255224" fg:w="117200"/><text x="29.9321%" y="239.50">std::io::BufRead::rea..</text></g><g><title>std::io::read_until (117,200 samples, 13.63%)</title><rect x="29.6821%" y="213" width="13.6302%" height="15" fill="rgb(247,98,35)" fg:x="255224" fg:w="117200"/><text x="29.9321%" y="223.50">std::io::read_until</text></g><g><title>std::sys_common::memchr::memchr (47,856 samples, 5.57%)</title><rect x="37.7467%" y="197" width="5.5656%" height="15" fill="rgb(247,138,52)" fg:x="324568" fg:w="47856"/><text x="37.9967%" y="207.50">std::sy..</text></g><g><title>std::sys::unix::memchr::memchr (39,127 samples, 4.55%)</title><rect x="38.7619%" y="181" width="4.5504%" height="15" fill="rgb(213,79,30)" fg:x="333297" fg:w="39127"/><text x="39.0119%" y="191.50">std::..</text></g><g><title>[libc.so.6] (24,279 samples, 2.82%)</title><rect x="40.4887%" y="165" width="2.8236%" height="15" fill="rgb(246,177,23)" fg:x="348145" fg:w="24279"/><text x="40.7387%" y="175.50">[l..</text></g><g><title>__rdl_dealloc (2,986 samples, 0.35%)</title><rect x="43.3145%" y="181" width="0.3473%" height="15" fill="rgb(230,62,27)" fg:x="372443" fg:w="2986"/><text x="43.5645%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,986 samples, 0.35%)</title><rect x="43.3145%" y="165" width="0.3473%" height="15" fill="rgb(216,154,8)" fg:x="372443" fg:w="2986"/><text x="43.5645%" y="175.50"></text></g><g><title>__rust_dealloc (272 samples, 0.03%)</title><rect x="43.6618%" y="181" width="0.0316%" height="15" fill="rgb(244,35,45)" fg:x="375429" fg:w="272"/><text x="43.9118%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (60,534 samples, 7.04%)</title><rect x="43.3126%" y="213" width="7.0400%" height="15" fill="rgb(251,115,12)" fg:x="372426" fg:w="60534"/><text x="43.5626%" y="223.50">&lt;alloc::a..</text></g><g><title>alloc::alloc::dealloc (60,534 samples, 7.04%)</title><rect x="43.3126%" y="197" width="7.0400%" height="15" fill="rgb(240,54,50)" fg:x="372426" fg:w="60534"/><text x="43.5626%" y="207.50">alloc::al..</text></g><g><title>cfree (57,259 samples, 6.66%)</title><rect x="43.6934%" y="181" width="6.6591%" height="15" fill="rgb(233,84,52)" fg:x="375701" fg:w="57259"/><text x="43.9434%" y="191.50">cfree</text></g><g><title>[libc.so.6] (35,997 samples, 4.19%)</title><rect x="46.1662%" y="165" width="4.1864%" height="15" fill="rgb(207,117,47)" fg:x="396963" fg:w="35997"/><text x="46.4162%" y="175.50">[libc..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (60,536 samples, 7.04%)</title><rect x="43.3126%" y="277" width="7.0402%" height="15" fill="rgb(249,43,39)" fg:x="372426" fg:w="60536"/><text x="43.5626%" y="287.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (60,536 samples, 7.04%)</title><rect x="43.3126%" y="261" width="7.0402%" height="15" fill="rgb(209,38,44)" fg:x="372426" fg:w="60536"/><text x="43.5626%" y="271.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (60,536 samples, 7.04%)</title><rect x="43.3126%" y="245" width="7.0402%" height="15" fill="rgb(236,212,23)" fg:x="372426" fg:w="60536"/><text x="43.5626%" y="255.50">core::ptr..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (60,536 samples, 7.04%)</title><rect x="43.3126%" y="229" width="7.0402%" height="15" fill="rgb(242,79,21)" fg:x="372426" fg:w="60536"/><text x="43.5626%" y="239.50">&lt;alloc::r..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5,982 samples, 0.70%)</title><rect x="50.4920%" y="229" width="0.6957%" height="15" fill="rgb(211,96,35)" fg:x="434159" fg:w="5982"/><text x="50.7420%" y="239.50"></text></g><g><title>core::mem::drop (5,976 samples, 0.69%)</title><rect x="50.4927%" y="213" width="0.6950%" height="15" fill="rgb(253,215,40)" fg:x="434165" fg:w="5976"/><text x="50.7427%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;str,&amp;alloc::alloc::Global&gt;&gt; (5,976 samples, 0.69%)</title><rect x="50.4927%" y="197" width="0.6950%" height="15" fill="rgb(211,81,21)" fg:x="434165" fg:w="5976"/><text x="50.7427%" y="207.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,976 samples, 0.69%)</title><rect x="50.4927%" y="181" width="0.6950%" height="15" fill="rgb(208,190,38)" fg:x="434165" fg:w="5976"/><text x="50.7427%" y="191.50"></text></g><g><title>cfree (9,143 samples, 1.06%)</title><rect x="51.1878%" y="229" width="1.0633%" height="15" fill="rgb(235,213,38)" fg:x="440142" fg:w="9143"/><text x="51.4378%" y="239.50"></text></g><g><title>[libc.so.6] (125 samples, 0.01%)</title><rect x="52.2366%" y="213" width="0.0145%" height="15" fill="rgb(237,122,38)" fg:x="449160" fg:w="125"/><text x="52.4866%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_1brc::Station&gt; (16,331 samples, 1.90%)</title><rect x="50.3528%" y="277" width="1.8993%" height="15" fill="rgb(244,218,35)" fg:x="432962" fg:w="16331"/><text x="50.6028%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (16,331 samples, 1.90%)</title><rect x="50.3528%" y="261" width="1.8993%" height="15" fill="rgb(240,68,47)" fg:x="432962" fg:w="16331"/><text x="50.6028%" y="271.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,331 samples, 1.90%)</title><rect x="50.3528%" y="245" width="1.8993%" height="15" fill="rgb(210,16,53)" fg:x="432962" fg:w="16331"/><text x="50.6028%" y="255.50">&lt;..</text></g><g><title>alloc::sync::Arc&lt;T&gt;::initialize_arcinner (451 samples, 0.05%)</title><rect x="56.7137%" y="133" width="0.0525%" height="15" fill="rgb(235,124,12)" fg:x="487657" fg:w="451"/><text x="56.9637%" y="143.50"></text></g><g><title>core::ptr::write (451 samples, 0.05%)</title><rect x="56.7137%" y="117" width="0.0525%" height="15" fill="rgb(224,169,11)" fg:x="487657" fg:w="451"/><text x="56.9637%" y="127.50"></text></g><g><title>__rdl_alloc (2,693 samples, 0.31%)</title><rect x="57.0666%" y="69" width="0.3132%" height="15" fill="rgb(250,166,2)" fg:x="490691" fg:w="2693"/><text x="57.3166%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,377 samples, 0.16%)</title><rect x="57.2196%" y="53" width="0.1601%" height="15" fill="rgb(242,216,29)" fg:x="492007" fg:w="1377"/><text x="57.4696%" y="63.50"></text></g><g><title>__rust_alloc (1,252 samples, 0.15%)</title><rect x="57.3798%" y="69" width="0.1456%" height="15" fill="rgb(230,116,27)" fg:x="493384" fg:w="1252"/><text x="57.6298%" y="79.50"></text></g><g><title>core::ptr::read_volatile (156 samples, 0.02%)</title><rect x="57.5254%" y="69" width="0.0181%" height="15" fill="rgb(228,99,48)" fg:x="494636" fg:w="156"/><text x="57.7754%" y="79.50"></text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice::_{{closure}} (31,577 samples, 3.67%)</title><rect x="56.7662%" y="133" width="3.6724%" height="15" fill="rgb(253,11,6)" fg:x="488108" fg:w="31577"/><text x="57.0162%" y="143.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31,577 samples, 3.67%)</title><rect x="56.7662%" y="117" width="3.6724%" height="15" fill="rgb(247,143,39)" fg:x="488108" fg:w="31577"/><text x="57.0162%" y="127.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (31,577 samples, 3.67%)</title><rect x="56.7662%" y="101" width="3.6724%" height="15" fill="rgb(236,97,10)" fg:x="488108" fg:w="31577"/><text x="57.0162%" y="111.50">allo..</text></g><g><title>alloc::alloc::alloc (29,937 samples, 3.48%)</title><rect x="56.9569%" y="85" width="3.4816%" height="15" fill="rgb(233,208,19)" fg:x="489748" fg:w="29937"/><text x="57.2069%" y="95.50">all..</text></g><g><title>malloc (24,893 samples, 2.90%)</title><rect x="57.5435%" y="69" width="2.8950%" height="15" fill="rgb(216,164,2)" fg:x="494792" fg:w="24893"/><text x="57.7935%" y="79.50">ma..</text></g><g><title>core::alloc::layout::Layout::padding_needed_for (1,334 samples, 0.16%)</title><rect x="60.6181%" y="101" width="0.1551%" height="15" fill="rgb(220,129,5)" fg:x="521229" fg:w="1334"/><text x="60.8681%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,011 samples, 0.12%)</title><rect x="60.6557%" y="85" width="0.1176%" height="15" fill="rgb(242,17,10)" fg:x="521552" fg:w="1011"/><text x="60.9057%" y="95.50"></text></g><g><title>core::cmp::max (1,840 samples, 0.21%)</title><rect x="60.7732%" y="101" width="0.2140%" height="15" fill="rgb(242,107,0)" fg:x="522563" fg:w="1840"/><text x="61.0232%" y="111.50"></text></g><g><title>core::cmp::Ord::max (1,840 samples, 0.21%)</title><rect x="60.7732%" y="85" width="0.2140%" height="15" fill="rgb(251,28,31)" fg:x="522563" fg:w="1840"/><text x="61.0232%" y="95.50"></text></g><g><title>core::cmp::max_by (1,840 samples, 0.21%)</title><rect x="60.7732%" y="69" width="0.2140%" height="15" fill="rgb(233,223,10)" fg:x="522563" fg:w="1840"/><text x="61.0232%" y="79.50"></text></g><g><title>core::alloc::layout::Layout::extend (5,057 samples, 0.59%)</title><rect x="60.4564%" y="117" width="0.5881%" height="15" fill="rgb(215,21,27)" fg:x="519839" fg:w="5057"/><text x="60.7064%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (493 samples, 0.06%)</title><rect x="60.9872%" y="101" width="0.0573%" height="15" fill="rgb(232,23,21)" fg:x="524403" fg:w="493"/><text x="61.2372%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (493 samples, 0.06%)</title><rect x="60.9872%" y="85" width="0.0573%" height="15" fill="rgb(244,5,23)" fg:x="524403" fg:w="493"/><text x="61.2372%" y="95.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (6,193 samples, 0.72%)</title><rect x="60.4385%" y="133" width="0.7202%" height="15" fill="rgb(226,81,46)" fg:x="519685" fg:w="6193"/><text x="60.6885%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (982 samples, 0.11%)</title><rect x="61.0446%" y="117" width="0.1142%" height="15" fill="rgb(247,70,30)" fg:x="524896" fg:w="982"/><text x="61.2946%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (982 samples, 0.11%)</title><rect x="61.0446%" y="101" width="0.1142%" height="15" fill="rgb(212,68,19)" fg:x="524896" fg:w="982"/><text x="61.2946%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (193 samples, 0.02%)</title><rect x="61.1363%" y="85" width="0.0224%" height="15" fill="rgb(240,187,13)" fg:x="525685" fg:w="193"/><text x="61.3863%" y="95.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::allocate_for_layout (40,170 samples, 4.67%)</title><rect x="56.4929%" y="149" width="4.6717%" height="15" fill="rgb(223,113,26)" fg:x="485758" fg:w="40170"/><text x="56.7429%" y="159.50">alloc..</text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::allocate_for_slice (40,496 samples, 4.71%)</title><rect x="56.4929%" y="165" width="4.7096%" height="15" fill="rgb(206,192,2)" fg:x="485758" fg:w="40496"/><text x="56.7429%" y="175.50">alloc..</text></g><g><title>core::alloc::layout::Layout::array (326 samples, 0.04%)</title><rect x="61.1646%" y="149" width="0.0379%" height="15" fill="rgb(241,108,4)" fg:x="525928" fg:w="326"/><text x="61.4146%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (326 samples, 0.04%)</title><rect x="61.1646%" y="133" width="0.0379%" height="15" fill="rgb(247,173,49)" fg:x="525928" fg:w="326"/><text x="61.4146%" y="143.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (46,896 samples, 5.45%)</title><rect x="56.4314%" y="245" width="5.4539%" height="15" fill="rgb(224,114,35)" fg:x="485229" fg:w="46896"/><text x="56.6814%" y="255.50">&lt;T as c..</text></g><g><title>&lt;alloc::sync::Arc&lt;str&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (46,896 samples, 5.45%)</title><rect x="56.4314%" y="229" width="5.4539%" height="15" fill="rgb(245,159,27)" fg:x="485229" fg:w="46896"/><text x="56.6814%" y="239.50">&lt;alloc:..</text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (46,896 samples, 5.45%)</title><rect x="56.4314%" y="213" width="5.4539%" height="15" fill="rgb(245,172,44)" fg:x="485229" fg:w="46896"/><text x="56.6814%" y="223.50">&lt;alloc:..</text></g><g><title>&lt;alloc::sync::Arc&lt;[T]&gt; as alloc::sync::ArcFromSlice&lt;T&gt;&gt;::from_slice (46,896 samples, 5.45%)</title><rect x="56.4314%" y="197" width="5.4539%" height="15" fill="rgb(236,23,11)" fg:x="485229" fg:w="46896"/><text x="56.6814%" y="207.50">&lt;alloc:..</text></g><g><title>alloc::sync::Arc&lt;[T]&gt;::copy_from_slice (46,896 samples, 5.45%)</title><rect x="56.4314%" y="181" width="5.4539%" height="15" fill="rgb(205,117,38)" fg:x="485229" fg:w="46896"/><text x="56.6814%" y="191.50">alloc::..</text></g><g><title>core::intrinsics::copy_nonoverlapping (5,871 samples, 0.68%)</title><rect x="61.2025%" y="165" width="0.6828%" height="15" fill="rgb(237,72,25)" fg:x="526254" fg:w="5871"/><text x="61.4525%" y="175.50"></text></g><g><title>[libc.so.6] (4,768 samples, 0.55%)</title><rect x="61.3308%" y="149" width="0.5545%" height="15" fill="rgb(244,70,9)" fg:x="527357" fg:w="4768"/><text x="61.5808%" y="159.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3,401 samples, 0.40%)</title><rect x="61.8853%" y="245" width="0.3955%" height="15" fill="rgb(217,125,39)" fg:x="532125" fg:w="3401"/><text x="62.1353%" y="255.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (3,423 samples, 0.40%)</title><rect x="67.0857%" y="181" width="0.3981%" height="15" fill="rgb(235,36,10)" fg:x="576841" fg:w="3423"/><text x="67.3357%" y="191.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (800 samples, 0.09%)</title><rect x="67.4931%" y="181" width="0.0930%" height="15" fill="rgb(251,123,47)" fg:x="580344" fg:w="800"/><text x="67.7431%" y="191.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (317 samples, 0.04%)</title><rect x="67.5861%" y="181" width="0.0369%" height="15" fill="rgb(221,13,13)" fg:x="581144" fg:w="317"/><text x="67.8361%" y="191.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (8,800 samples, 1.02%)</title><rect x="66.8382%" y="197" width="1.0234%" height="15" fill="rgb(238,131,9)" fg:x="574713" fg:w="8800"/><text x="67.0882%" y="207.50"></text></g><g><title>core::num::dec2flt::number::Number::is_fast_path (2,052 samples, 0.24%)</title><rect x="67.6230%" y="181" width="0.2386%" height="15" fill="rgb(211,50,8)" fg:x="581461" fg:w="2052"/><text x="67.8730%" y="191.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (388 samples, 0.05%)</title><rect x="71.7083%" y="133" width="0.0451%" height="15" fill="rgb(245,182,24)" fg:x="616589" fg:w="388"/><text x="71.9583%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (487 samples, 0.06%)</title><rect x="71.7638%" y="117" width="0.0566%" height="15" fill="rgb(242,14,37)" fg:x="617066" fg:w="487"/><text x="72.0138%" y="127.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (19,457 samples, 2.26%)</title><rect x="69.7012%" y="165" width="2.2628%" height="15" fill="rgb(246,228,12)" fg:x="599331" fg:w="19457"/><text x="69.9512%" y="175.50">c..</text></g><g><title>&lt;[u8] as core::num::dec2flt::common::ByteSlice&gt;::parse_digits (16,298 samples, 1.90%)</title><rect x="70.0686%" y="149" width="1.8954%" height="15" fill="rgb(213,55,15)" fg:x="602490" fg:w="16298"/><text x="70.3186%" y="159.50">&lt;..</text></g><g><title>core::num::dec2flt::parse::try_parse_digits::_{{closure}} (1,811 samples, 0.21%)</title><rect x="71.7534%" y="133" width="0.2106%" height="15" fill="rgb(209,9,3)" fg:x="616977" fg:w="1811"/><text x="72.0034%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1,235 samples, 0.14%)</title><rect x="71.8204%" y="117" width="0.1436%" height="15" fill="rgb(230,59,30)" fg:x="617553" fg:w="1235"/><text x="72.0704%" y="127.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (35,435 samples, 4.12%)</title><rect x="67.8616%" y="197" width="4.1210%" height="15" fill="rgb(209,121,21)" fg:x="583513" fg:w="35435"/><text x="68.1116%" y="207.50">core..</text></g><g><title>core::num::dec2flt::parse::parse_partial_number (30,252 samples, 3.52%)</title><rect x="68.4644%" y="181" width="3.5183%" height="15" fill="rgb(220,109,13)" fg:x="588696" fg:w="30252"/><text x="68.7144%" y="191.50">cor..</text></g><g><title>core::slice::&lt;impl [T]&gt;::split_first (160 samples, 0.02%)</title><rect x="71.9641%" y="165" width="0.0186%" height="15" fill="rgb(232,18,1)" fg:x="618788" fg:w="160"/><text x="72.2141%" y="175.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (83,564 samples, 9.72%)</title><rect x="62.2808%" y="245" width="9.7184%" height="15" fill="rgb(215,41,42)" fg:x="535526" fg:w="83564"/><text x="62.5308%" y="255.50">core::str::&lt;im..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (83,338 samples, 9.69%)</title><rect x="62.3071%" y="229" width="9.6921%" height="15" fill="rgb(224,123,36)" fg:x="535752" fg:w="83338"/><text x="62.5571%" y="239.50">core::num::dec..</text></g><g><title>core::num::dec2flt::dec2flt (72,391 samples, 8.42%)</title><rect x="63.5802%" y="213" width="8.4190%" height="15" fill="rgb(240,125,3)" fg:x="546699" fg:w="72391"/><text x="63.8302%" y="223.50">core::num::d..</text></g><g><title>core::slice::&lt;impl [T]&gt;::first (142 samples, 0.02%)</title><rect x="71.9827%" y="197" width="0.0165%" height="15" fill="rgb(205,98,50)" fg:x="618948" fg:w="142"/><text x="72.2327%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (417 samples, 0.05%)</title><rect x="72.9657%" y="213" width="0.0485%" height="15" fill="rgb(205,185,37)" fg:x="627401" fg:w="417"/><text x="73.2157%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (417 samples, 0.05%)</title><rect x="72.9657%" y="197" width="0.0485%" height="15" fill="rgb(238,207,15)" fg:x="627401" fg:w="417"/><text x="73.2157%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (417 samples, 0.05%)</title><rect x="72.9657%" y="181" width="0.0485%" height="15" fill="rgb(213,199,42)" fg:x="627401" fg:w="417"/><text x="73.2157%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::repeat_u8 (407 samples, 0.05%)</title><rect x="73.5591%" y="181" width="0.0473%" height="15" fill="rgb(235,201,11)" fg:x="632503" fg:w="407"/><text x="73.8091%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (689 samples, 0.08%)</title><rect x="73.6064%" y="181" width="0.0801%" height="15" fill="rgb(207,46,11)" fg:x="632910" fg:w="689"/><text x="73.8564%" y="191.50"></text></g><g><title>core::ptr::align_offset (689 samples, 0.08%)</title><rect x="73.6064%" y="165" width="0.0801%" height="15" fill="rgb(241,35,35)" fg:x="632910" fg:w="689"/><text x="73.8564%" y="175.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (667 samples, 0.08%)</title><rect x="73.6866%" y="181" width="0.0776%" height="15" fill="rgb(243,32,47)" fg:x="633599" fg:w="667"/><text x="73.9366%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (273 samples, 0.03%)</title><rect x="73.7324%" y="165" width="0.0317%" height="15" fill="rgb(247,202,23)" fg:x="633993" fg:w="273"/><text x="73.9824%" y="175.50"></text></g><g><title>core::slice::memchr::memchr_aligned (8,346 samples, 0.97%)</title><rect x="73.2999%" y="197" width="0.9706%" height="15" fill="rgb(219,102,11)" fg:x="630274" fg:w="8346"/><text x="73.5499%" y="207.50"></text></g><g><title>core::slice::memchr::memchr_naive (4,354 samples, 0.51%)</title><rect x="73.7641%" y="181" width="0.5064%" height="15" fill="rgb(243,110,44)" fg:x="634266" fg:w="4354"/><text x="74.0141%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (226,462 samples, 26.34%)</title><rect x="52.2521%" y="277" width="26.3372%" height="15" fill="rgb(222,74,54)" fg:x="449293" fg:w="226462"/><text x="52.5021%" y="287.50">core::str::&lt;impl str&gt;::parse</text></g><g><title>&lt;rust_1brc::Station as core::str::traits::FromStr&gt;::from_str (221,289 samples, 25.74%)</title><rect x="52.8537%" y="261" width="25.7356%" height="15" fill="rgb(216,99,12)" fg:x="454466" fg:w="221289"/><text x="53.1037%" y="271.50">&lt;rust_1brc::Station as core::str::traits:..</text></g><g><title>core::str::&lt;impl str&gt;::split_once (56,665 samples, 6.59%)</title><rect x="71.9992%" y="245" width="6.5900%" height="15" fill="rgb(226,22,26)" fg:x="619090" fg:w="56665"/><text x="72.2492%" y="255.50">core::str..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (56,665 samples, 6.59%)</title><rect x="71.9992%" y="229" width="6.5900%" height="15" fill="rgb(217,163,10)" fg:x="619090" fg:w="56665"/><text x="72.2492%" y="239.50">&lt;core::st..</text></g><g><title>core::slice::memchr::memchr (47,937 samples, 5.57%)</title><rect x="73.0142%" y="213" width="5.5750%" height="15" fill="rgb(213,25,53)" fg:x="627818" fg:w="47937"/><text x="73.2642%" y="223.50">core::s..</text></g><g><title>core::slice::memchr::memchr_naive (37,135 samples, 4.32%)</title><rect x="74.2705%" y="197" width="4.3187%" height="15" fill="rgb(252,105,26)" fg:x="638620" fg:w="37135"/><text x="74.5205%" y="207.50">core:..</text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (3,522 samples, 0.41%)</title><rect x="78.5895%" y="277" width="0.4096%" height="15" fill="rgb(220,39,43)" fg:x="675757" fg:w="3522"/><text x="78.8395%" y="287.50"></text></g><g><title>&lt;rust_1brc::processor::serial::Serial as rust_1brc::processor::Processor&gt;::process::_{{closure}} (3,522 samples, 0.41%)</title><rect x="78.5895%" y="261" width="0.4096%" height="15" fill="rgb(229,68,48)" fg:x="675757" fg:w="3522"/><text x="78.8395%" y="271.50"></text></g><g><title>&lt;rust_1brc::TempResult as core::ops::arith::AddAssign&lt;&amp;rust_1brc::Station&gt;&gt;::add_assign (3,522 samples, 0.41%)</title><rect x="78.5895%" y="245" width="0.4096%" height="15" fill="rgb(252,8,32)" fg:x="675757" fg:w="3522"/><text x="78.8395%" y="255.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (65,542 samples, 7.62%)</title><rect x="78.9991%" y="277" width="7.6224%" height="15" fill="rgb(223,20,43)" fg:x="679279" fg:w="65542"/><text x="79.2491%" y="287.50">std::colle..</text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (64,861 samples, 7.54%)</title><rect x="79.0783%" y="261" width="7.5432%" height="15" fill="rgb(229,81,49)" fg:x="679960" fg:w="64861"/><text x="79.3283%" y="271.50">std::colle..</text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (64,861 samples, 7.54%)</title><rect x="79.0783%" y="245" width="7.5432%" height="15" fill="rgb(236,28,36)" fg:x="679960" fg:w="64861"/><text x="79.3283%" y="255.50">hashbrown:..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::sync::Arc&lt;str&gt;,rust_1brc::TempResult&gt;&gt; (64,861 samples, 7.54%)</title><rect x="79.0783%" y="229" width="7.5432%" height="15" fill="rgb(249,185,26)" fg:x="679960" fg:w="64861"/><text x="79.3283%" y="239.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt; (64,861 samples, 7.54%)</title><rect x="79.0783%" y="213" width="7.5432%" height="15" fill="rgb(249,174,33)" fg:x="679960" fg:w="64861"/><text x="79.3283%" y="223.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (64,600 samples, 7.51%)</title><rect x="79.1086%" y="197" width="7.5129%" height="15" fill="rgb(233,201,37)" fg:x="680221" fg:w="64600"/><text x="79.3586%" y="207.50">core::ptr:..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (64,600 samples, 7.51%)</title><rect x="79.1086%" y="181" width="7.5129%" height="15" fill="rgb(221,78,26)" fg:x="680221" fg:w="64600"/><text x="79.3586%" y="191.50">&lt;alloc::sy..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,907 samples, 0.22%)</title><rect x="88.6126%" y="149" width="0.2218%" height="15" fill="rgb(250,127,30)" fg:x="761942" fg:w="1907"/><text x="88.8626%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9,893 samples, 1.15%)</title><rect x="88.2384%" y="165" width="1.1505%" height="15" fill="rgb(230,49,44)" fg:x="758724" fg:w="9893"/><text x="88.4884%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,768 samples, 0.55%)</title><rect x="88.8344%" y="149" width="0.5545%" height="15" fill="rgb(229,67,23)" fg:x="763849" fg:w="4768"/><text x="89.0844%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,881 samples, 0.80%)</title><rect x="90.0306%" y="149" width="0.8002%" height="15" fill="rgb(249,83,47)" fg:x="774134" fg:w="6881"/><text x="90.2806%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (31,498 samples, 3.66%)</title><rect x="87.6025%" y="213" width="3.6632%" height="15" fill="rgb(215,43,3)" fg:x="753256" fg:w="31498"/><text x="87.8525%" y="223.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (31,498 samples, 3.66%)</title><rect x="87.6025%" y="197" width="3.6632%" height="15" fill="rgb(238,154,13)" fg:x="753256" fg:w="31498"/><text x="87.8525%" y="207.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (31,498 samples, 3.66%)</title><rect x="87.6025%" y="181" width="3.6632%" height="15" fill="rgb(219,56,2)" fg:x="753256" fg:w="31498"/><text x="87.8525%" y="191.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (16,137 samples, 1.88%)</title><rect x="89.3889%" y="165" width="1.8767%" height="15" fill="rgb(233,0,4)" fg:x="768617" fg:w="16137"/><text x="89.6389%" y="175.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,739 samples, 0.43%)</title><rect x="90.8308%" y="149" width="0.4348%" height="15" fill="rgb(235,30,7)" fg:x="781015" fg:w="3739"/><text x="91.0808%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (91 samples, 0.01%)</title><rect x="91.2989%" y="101" width="0.0106%" height="15" fill="rgb(250,79,13)" fg:x="785040" fg:w="91"/><text x="91.5489%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (1,733 samples, 0.20%)</title><rect x="91.3095%" y="101" width="0.2015%" height="15" fill="rgb(211,146,34)" fg:x="785131" fg:w="1733"/><text x="91.5595%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,107 samples, 0.25%)</title><rect x="91.2661%" y="117" width="0.2450%" height="15" fill="rgb(228,22,38)" fg:x="784758" fg:w="2107"/><text x="91.5161%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,009 samples, 0.12%)</title><rect x="92.1075%" y="69" width="0.1173%" height="15" fill="rgb(235,168,5)" fg:x="791993" fg:w="1009"/><text x="92.3575%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,004 samples, 0.23%)</title><rect x="92.1044%" y="85" width="0.2331%" height="15" fill="rgb(221,155,16)" fg:x="791966" fg:w="2004"/><text x="92.3544%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (968 samples, 0.11%)</title><rect x="92.2249%" y="69" width="0.1126%" height="15" fill="rgb(215,215,53)" fg:x="793002" fg:w="968"/><text x="92.4749%" y="79.50"></text></g><g><title>core::cmp::min (2,426 samples, 0.28%)</title><rect x="92.3374%" y="85" width="0.2821%" height="15" fill="rgb(223,4,10)" fg:x="793970" fg:w="2426"/><text x="92.5874%" y="95.50"></text></g><g><title>core::cmp::Ord::min (2,426 samples, 0.28%)</title><rect x="92.3374%" y="69" width="0.2821%" height="15" fill="rgb(234,103,6)" fg:x="793970" fg:w="2426"/><text x="92.5874%" y="79.50"></text></g><g><title>core::cmp::min_by (2,426 samples, 0.28%)</title><rect x="92.3374%" y="53" width="0.2821%" height="15" fill="rgb(227,97,0)" fg:x="793970" fg:w="2426"/><text x="92.5874%" y="63.50"></text></g><g><title>core::hash::Hasher::write_u8 (13,270 samples, 1.54%)</title><rect x="91.5111%" y="117" width="1.5433%" height="15" fill="rgb(234,150,53)" fg:x="786865" fg:w="13270"/><text x="91.7611%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13,027 samples, 1.52%)</title><rect x="91.5394%" y="101" width="1.5150%" height="15" fill="rgb(228,201,54)" fg:x="787108" fg:w="13027"/><text x="91.7894%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (3,739 samples, 0.43%)</title><rect x="92.6196%" y="85" width="0.4348%" height="15" fill="rgb(222,22,37)" fg:x="796396" fg:w="3739"/><text x="92.8696%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (50,084 samples, 5.82%)</title><rect x="87.2299%" y="245" width="5.8247%" height="15" fill="rgb(237,53,32)" fg:x="750052" fg:w="50084"/><text x="87.4799%" y="255.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (50,084 samples, 5.82%)</title><rect x="87.2299%" y="229" width="5.8247%" height="15" fill="rgb(233,25,53)" fg:x="750052" fg:w="50084"/><text x="87.4799%" y="239.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15,378 samples, 1.79%)</title><rect x="91.2661%" y="213" width="1.7884%" height="15" fill="rgb(210,40,34)" fg:x="784758" fg:w="15378"/><text x="91.5161%" y="223.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::hash::Hash&gt;::hash (15,378 samples, 1.79%)</title><rect x="91.2661%" y="197" width="1.7884%" height="15" fill="rgb(241,220,44)" fg:x="784758" fg:w="15378"/><text x="91.5161%" y="207.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (15,378 samples, 1.79%)</title><rect x="91.2661%" y="181" width="1.7884%" height="15" fill="rgb(235,28,35)" fg:x="784758" fg:w="15378"/><text x="91.5161%" y="191.50">c..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (15,378 samples, 1.79%)</title><rect x="91.2661%" y="165" width="1.7884%" height="15" fill="rgb(210,56,17)" fg:x="784758" fg:w="15378"/><text x="91.5161%" y="175.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (15,378 samples, 1.79%)</title><rect x="91.2661%" y="149" width="1.7884%" height="15" fill="rgb(224,130,29)" fg:x="784758" fg:w="15378"/><text x="91.5161%" y="159.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (15,378 samples, 1.79%)</title><rect x="91.2661%" y="133" width="1.7884%" height="15" fill="rgb(235,212,8)" fg:x="784758" fg:w="15378"/><text x="91.5161%" y="143.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4,070 samples, 0.47%)</title><rect x="93.4794%" y="197" width="0.4733%" height="15" fill="rgb(223,33,50)" fg:x="803789" fg:w="4070"/><text x="93.7294%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4,360 samples, 0.51%)</title><rect x="93.4794%" y="213" width="0.5071%" height="15" fill="rgb(219,149,13)" fg:x="803789" fg:w="4360"/><text x="93.7294%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (290 samples, 0.03%)</title><rect x="93.9527%" y="197" width="0.0337%" height="15" fill="rgb(250,156,29)" fg:x="807859" fg:w="290"/><text x="94.2027%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (4,812 samples, 0.56%)</title><rect x="95.3324%" y="197" width="0.5596%" height="15" fill="rgb(216,193,19)" fg:x="819722" fg:w="4812"/><text x="95.5824%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (4,812 samples, 0.56%)</title><rect x="95.3324%" y="181" width="0.5596%" height="15" fill="rgb(216,135,14)" fg:x="819722" fg:w="4812"/><text x="95.5824%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4,812 samples, 0.56%)</title><rect x="95.3324%" y="165" width="0.5596%" height="15" fill="rgb(241,47,5)" fg:x="819722" fg:w="4812"/><text x="95.5824%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3,380 samples, 0.39%)</title><rect x="95.4989%" y="149" width="0.3931%" height="15" fill="rgb(233,42,35)" fg:x="821154" fg:w="3380"/><text x="95.7489%" y="159.50"></text></g><g><title>[libc.so.6] (18,406 samples, 2.14%)</title><rect x="96.1549%" y="85" width="2.1406%" height="15" fill="rgb(231,13,6)" fg:x="826795" fg:w="18406"/><text x="96.4049%" y="95.50">[..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (37,023 samples, 4.31%)</title><rect x="93.9899%" y="213" width="4.3057%" height="15" fill="rgb(207,181,40)" fg:x="808179" fg:w="37023"/><text x="94.2399%" y="223.50">hashb..</text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (20,668 samples, 2.40%)</title><rect x="95.8920%" y="197" width="2.4037%" height="15" fill="rgb(254,173,49)" fg:x="824534" fg:w="20668"/><text x="96.1420%" y="207.50">ha..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (20,668 samples, 2.40%)</title><rect x="95.8920%" y="181" width="2.4037%" height="15" fill="rgb(221,1,38)" fg:x="824534" fg:w="20668"/><text x="96.1420%" y="191.50">&lt;a..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as alloc::sync::ArcEqIdent&lt;T,A&gt;&gt;::eq (20,668 samples, 2.40%)</title><rect x="95.8920%" y="165" width="2.4037%" height="15" fill="rgb(206,124,46)" fg:x="824534" fg:w="20668"/><text x="96.1420%" y="175.50">&lt;a..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (19,482 samples, 2.27%)</title><rect x="96.0299%" y="149" width="2.2657%" height="15" fill="rgb(249,21,11)" fg:x="825720" fg:w="19482"/><text x="96.2799%" y="159.50">c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (19,482 samples, 2.27%)</title><rect x="96.0299%" y="133" width="2.2657%" height="15" fill="rgb(222,201,40)" fg:x="825720" fg:w="19482"/><text x="96.2799%" y="143.50">c..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (19,482 samples, 2.27%)</title><rect x="96.0299%" y="117" width="2.2657%" height="15" fill="rgb(235,61,29)" fg:x="825720" fg:w="19482"/><text x="96.2799%" y="127.50">c..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (19,482 samples, 2.27%)</title><rect x="96.0299%" y="101" width="2.2657%" height="15" fill="rgb(219,207,3)" fg:x="825720" fg:w="19482"/><text x="96.2799%" y="111.50">&lt;..</text></g><g><title>hashbrown::raw::h2 (4,816 samples, 0.56%)</title><rect x="98.2956%" y="213" width="0.5601%" height="15" fill="rgb(222,56,46)" fg:x="845202" fg:w="4816"/><text x="98.5456%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3,337 samples, 0.39%)</title><rect x="98.8557%" y="213" width="0.3881%" height="15" fill="rgb(239,76,54)" fg:x="850018" fg:w="3337"/><text x="99.1057%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3,337 samples, 0.39%)</title><rect x="98.8557%" y="197" width="0.3881%" height="15" fill="rgb(231,124,27)" fg:x="850018" fg:w="3337"/><text x="99.1057%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,337 samples, 0.39%)</title><rect x="98.8557%" y="181" width="0.3881%" height="15" fill="rgb(249,195,6)" fg:x="850018" fg:w="3337"/><text x="99.1057%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3,126 samples, 0.36%)</title><rect x="99.2438%" y="213" width="0.3635%" height="15" fill="rgb(237,174,47)" fg:x="853355" fg:w="3126"/><text x="99.4938%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,126 samples, 0.36%)</title><rect x="99.2438%" y="197" width="0.3635%" height="15" fill="rgb(206,201,31)" fg:x="853355" fg:w="3126"/><text x="99.4938%" y="207.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (111,852 samples, 13.01%)</title><rect x="86.6894%" y="261" width="13.0082%" height="15" fill="rgb(231,57,52)" fg:x="745405" fg:w="111852"/><text x="86.9394%" y="271.50">hashbrown::rustc_ent..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (57,121 samples, 6.64%)</title><rect x="93.0545%" y="245" width="6.6431%" height="15" fill="rgb(248,177,22)" fg:x="800136" fg:w="57121"/><text x="93.3045%" y="255.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (57,038 samples, 6.63%)</title><rect x="93.0642%" y="229" width="6.6334%" height="15" fill="rgb(215,211,37)" fg:x="800219" fg:w="57038"/><text x="93.3142%" y="239.50">hashbrown..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (776 samples, 0.09%)</title><rect x="99.6074%" y="213" width="0.0902%" height="15" fill="rgb(241,128,51)" fg:x="856481" fg:w="776"/><text x="99.8574%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (776 samples, 0.09%)</title><rect x="99.6074%" y="197" width="0.0902%" height="15" fill="rgb(227,165,31)" fg:x="856481" fg:w="776"/><text x="99.8574%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (776 samples, 0.09%)</title><rect x="99.6074%" y="181" width="0.0902%" height="15" fill="rgb(228,167,24)" fg:x="856481" fg:w="776"/><text x="99.8574%" y="191.50"></text></g><g><title>all (859,857 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(228,143,12)" fg:x="0" fg:w="859857"/><text x="0.2500%" y="623.50"></text></g><g><title>rust-1brc (859,857 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(249,149,8)" fg:x="0" fg:w="859857"/><text x="0.2500%" y="607.50">rust-1brc</text></g><g><title>_start (859,843 samples, 100.00%)</title><rect x="0.0016%" y="581" width="99.9984%" height="15" fill="rgb(243,35,44)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="591.50">_start</text></g><g><title>__libc_start_main (859,843 samples, 100.00%)</title><rect x="0.0016%" y="565" width="99.9984%" height="15" fill="rgb(246,89,9)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="575.50">__libc_start_main</text></g><g><title>[libc.so.6] (859,843 samples, 100.00%)</title><rect x="0.0016%" y="549" width="99.9984%" height="15" fill="rgb(233,213,13)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="559.50">[libc.so.6]</text></g><g><title>main (859,843 samples, 100.00%)</title><rect x="0.0016%" y="533" width="99.9984%" height="15" fill="rgb(233,141,41)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="543.50">main</text></g><g><title>std::rt::lang_start_internal (859,843 samples, 100.00%)</title><rect x="0.0016%" y="517" width="99.9984%" height="15" fill="rgb(239,167,4)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (859,843 samples, 100.00%)</title><rect x="0.0016%" y="501" width="99.9984%" height="15" fill="rgb(209,217,16)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (859,843 samples, 100.00%)</title><rect x="0.0016%" y="485" width="99.9984%" height="15" fill="rgb(219,88,35)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (859,843 samples, 100.00%)</title><rect x="0.0016%" y="469" width="99.9984%" height="15" fill="rgb(220,193,23)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="479.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (859,843 samples, 100.00%)</title><rect x="0.0016%" y="453" width="99.9984%" height="15" fill="rgb(230,90,52)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="463.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (859,843 samples, 100.00%)</title><rect x="0.0016%" y="437" width="99.9984%" height="15" fill="rgb(252,106,19)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (859,843 samples, 100.00%)</title><rect x="0.0016%" y="421" width="99.9984%" height="15" fill="rgb(206,74,20)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (859,843 samples, 100.00%)</title><rect x="0.0016%" y="405" width="99.9984%" height="15" fill="rgb(230,138,44)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (859,843 samples, 100.00%)</title><rect x="0.0016%" y="389" width="99.9984%" height="15" fill="rgb(235,182,43)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (859,843 samples, 100.00%)</title><rect x="0.0016%" y="373" width="99.9984%" height="15" fill="rgb(242,16,51)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="383.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (859,843 samples, 100.00%)</title><rect x="0.0016%" y="357" width="99.9984%" height="15" fill="rgb(248,9,4)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (859,843 samples, 100.00%)</title><rect x="0.0016%" y="341" width="99.9984%" height="15" fill="rgb(210,31,22)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="351.50">core::ops::function::FnOnce::call_once</text></g><g><title>rust_1brc::main (859,843 samples, 100.00%)</title><rect x="0.0016%" y="325" width="99.9984%" height="15" fill="rgb(239,54,39)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="335.50">rust_1brc::main</text></g><g><title>rust_1brc::processor::process (859,843 samples, 100.00%)</title><rect x="0.0016%" y="309" width="99.9984%" height="15" fill="rgb(230,99,41)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="319.50">rust_1brc::processor::process</text></g><g><title>&lt;rust_1brc::processor::serial::Serial as rust_1brc::processor::Processor&gt;::process (859,843 samples, 100.00%)</title><rect x="0.0016%" y="293" width="99.9984%" height="15" fill="rgb(253,106,12)" fg:x="14" fg:w="859843"/><text x="0.2516%" y="303.50">&lt;rust_1brc::processor::serial::Serial as rust_1brc::processor::Processor&gt;::process</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (115,036 samples, 13.38%)</title><rect x="86.6215%" y="277" width="13.3785%" height="15" fill="rgb(213,46,41)" fg:x="744821" fg:w="115036"/><text x="86.8715%" y="287.50">std::collections::ha..</text></g><g><title>std::collections::hash::map::map_entry (2,600 samples, 0.30%)</title><rect x="99.6976%" y="261" width="0.3024%" height="15" fill="rgb(215,133,35)" fg:x="857257" fg:w="2600"/><text x="99.9476%" y="271.50"></text></g></svg></svg>